generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  addresses     Address[]
  subscribed    Boolean   @default(false)
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  sizes       Size[]        @relation("ProductToSize")
  colors      Color[]       @relation("ProductToColor")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
  inStock     Boolean       @default(true)
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[] @relation("ProductToSize")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(cuid())
  name      String    @unique
  hexCode   String    @unique
  products  Product[] @relation("ProductToColor")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      OrderItem[]
  total      Float
  status     OrderStatus @default(PENDING)
  addressId  String?
  address    Address?    @relation(fields: [addressId], references: [id])
  paymentId  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  size      String
  color     String
  price     Float
}

model Subscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}